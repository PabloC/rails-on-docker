apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: beer-app
parameters:
- name: HOSTNAME
  description: Hostname for the app (ex. beer.domain.com)
  required: true
- name: SECRET_KEY_BASE
  description: Secret key for Rails app
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: MYSQL_PASSWORD
  description: Mysql Password for the app
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: MYSQL_USER
  description: Mysql User for the app
  value: beer
  required: true
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: app
    name: app
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: app:latest
        namespace: beer
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: openshift
        uri: https://github.com/neckhair/rails-on-docker
      type: Git
    strategy:
      dockerStrategy:
        env:
        - name: SECRET_KEY_BASE
          value: "${SECRET_KEY_BASE}"
        - name: RAILS_ENV
          value: production
        - name: MYSQL_PASSWORD
          value: "${MYSQL_PASSWORD}"
        - name: MYSQL_USER
          value: "${MYSQL_USER}"
      type: Docker
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: app
    namespace: beer
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: mysql
    name: mysql
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: redis
    name: redis
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: memcached
    name: memcached
  spec:
    replicas: 1
    selector:
      app: memcached
      deploymentconfig: memcached
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: memcached
          deploymentconfig: memcached
      spec:
        containers:
        - image: memcached:latest
          imagePullPolicy: Always
          name: memcached
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: mysql
    name: mysql
  spec:
    replicas: 1
    selector:
      app: mysql
      deploymentconfig: mysql
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: mysql
          deploymentconfig: mysql
      spec:
        containers:
        - env:
          - name: MYSQL_PASSWORD
            value: "${MYSQL_PASSWORD}"
          - name: MYSQL_USER
            value: "${MYSQL_USER}"
          - name: MYSQL_DATABASE
            value: beer_production
          - name: MYSQL_RANDOM_ROOT_PASSWORD
            value: "true"
          image: mysql:5.7
          imagePullPolicy: IfNotPresent
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mysql
            name: mysql-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mysql-1
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:5.6
          namespace: beer
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: redis
    name: redis
  spec:
    replicas: 1
    selector:
      app: redis
      deploymentconfig: redis
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: redis
          deploymentconfig: redis
      spec:
        containers:
        - image: redis
          imagePullPolicy: Always
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /data
            name: redis-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: redis-1
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - redis
        from:
          kind: ImageStreamTag
          name: redis:latest
          namespace: beer
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 26
    labels:
      app: web
    name: web
  spec:
    replicas: 2
    selector:
      deploymentconfig: web
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: web
          deploymentconfig: web
      spec:
        containers:
        - command:
          - bundle
          - exec
          - puma
          - '--config'
          - config/puma.rb
          image: beer/app
          imagePullPolicy: Always
          name: web
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - web
        from:
          kind: ImageStreamTag
          name: app:latest
          namespace: beer
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: worker
    name: worker
  spec:
    replicas: 1
    selector:
      deploymentconfig: worker
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: worker
          deploymentconfig: worker
      spec:
        containers:
        - command:
          - bundle
          - exec
          - sidekiq
          - '-c'
          - "25"
          image: beer/app
          imagePullPolicy: Always
          name: worker
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - worker
        from:
          kind: ImageStreamTag
          name: app:latest
          namespace: beer
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: web
    name: web
  spec:
    host: "${HOSTNAME}"
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: web
      weight: 100
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: memcached
    name: memcached
  spec:
    ports:
    - name: 11211-tcp
      port: 11211
      protocol: TCP
      targetPort: 11211
    selector:
      deploymentconfig: memcached
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: mysql
    name: mysql
  spec:
    ports:
    - name: 3306-tcp
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      deploymentconfig: mysql
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: redis
    name: redis
  spec:
    ports:
    - name: 6379-tcp
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      deploymentconfig: redis
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: web
    name: web
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: web
    sessionAffinity: None
    type: ClusterIP
